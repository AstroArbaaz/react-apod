{"version":3,"sources":["components/Home.js","components/Navbar.js","components/NasaPhoto.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","to","Navbar","exact","apiKey","process","NasaPhoto","useState","PhotoData","setPhotoData","useEffect","a","fetch","res","json","data","fetchPhoto","media_type","src","url","alt","title","frameBorder","gesture","allow","allowFullScreen","date","explanation","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uPAGe,SAASA,IACpB,OACI,yBAAKC,UAAU,QACX,kBAAC,IAAD,CAAMA,UAAU,YAAYC,GAAG,eAA/B,wB,qCCHG,SAASC,IACpB,OACI,yBAAKF,UAAU,UACX,4BACI,kBAAC,IAAD,CAAMA,UAAU,OAAOC,GAAG,IAAIE,OAAK,GAAnC,kBCFhB,IAAMC,EAASC,2CAEA,SAASC,IAAY,IAAD,EAEGC,mBAAS,MAFZ,mBAExBC,EAFwB,KAEbC,EAFa,KAoB/B,OAhBAC,qBAAU,WAAM,4CAGZ,8BAAAC,EAAA,sEACsBC,MAAM,+CAAD,OAC4BR,IAFvD,cACUS,EADV,gBAMuBA,EAAIC,OAN3B,OAMUC,EANV,OAOIN,EAAaM,GAPjB,4CAHY,0DACZC,KAaD,IAEER,EAGD,6BACI,kBAACN,EAAD,MACA,yBAAKF,UAAU,cACe,UAAzBQ,EAAUS,WACP,yBAAKjB,UAAU,QAAQkB,IAAKV,EAAUW,IAAKC,IAAKZ,EAAUa,QAE1D,4BAAQA,MAAM,cAAcH,IAAKV,EAAUW,IAAKG,YAAY,IAAIC,QAAQ,QAAQC,MAAM,kBAAkBC,iBAAe,EAACzB,UAAU,UAEtI,6BACI,4BAAKQ,EAAUa,OACf,uBAAGrB,UAAU,QAAQQ,EAAUkB,MAC/B,uBAAG1B,UAAU,eAAeQ,EAAUmB,gBAd/B,8B,MCVZC,MAXf,WACE,OACE,kBAAC,IAAD,KACE,yBAAK5B,UAAU,OACb,kBAAC,IAAD,CAAO6B,KAAK,IAAI1B,OAAK,EAAC2B,UAAW/B,IACjC,kBAAC,IAAD,CAAO8B,KAAK,cAAcC,UAAWxB,OCCzByB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.019b67fb.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport default function Home() {\r\n    return (\r\n        <div className=\"home\">\r\n            <Link className=\"home-link\" to=\"/nasa_photo\">See into the Stars!</Link>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar() {\r\n    return (\r\n        <div className=\"navbar\">\r\n            <ul>\r\n                <Link className=\"link\" to=\"/\" exact >Take Me Home</Link>\r\n            </ul>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {useState} from 'react';\r\nimport {useEffect} from 'react';\r\nimport Navbar from './Navbar';\r\n\r\nconst apiKey = process.env.REACT_APP_NASA_KEY;\r\n\r\nexport default function NasaPhoto(){\r\n\r\n    const [PhotoData, setPhotoData] = useState(null);\r\n    \r\n    useEffect(() => {\r\n        fetchPhoto();\r\n\r\n        async function fetchPhoto() {\r\n            const res = await fetch(\r\n                `https://api.nasa.gov/planetary/apod?api_key=${apiKey}`\r\n                \r\n            );\r\n\r\n            const data = await res.json();\r\n            setPhotoData(data);\r\n\r\n        }\r\n\r\n    }, []);\r\n\r\n    if (!PhotoData) return <div/>;\r\n\r\n    return(\r\n        <div>\r\n            <Navbar/>\r\n            <div className=\"nasa-photo\">\r\n                {PhotoData.media_type === \"image\" ? (\r\n                    <img className=\"photo\" src={PhotoData.url} alt={PhotoData.title} />\r\n                    ) : (\r\n                    <iframe title=\"space-video\" src={PhotoData.url} frameBorder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowFullScreen className=\"photo\" />\r\n                )}\r\n                <div>\r\n                    <h1>{PhotoData.title}</h1>\r\n                    <p className=\"date\">{PhotoData.date}</p>\r\n                    <p className=\"explanation\">{PhotoData.explanation}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}","import React from 'react';\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport Home from \"./components/Home\";\nimport NasaPhoto from \"./components/NasaPhoto\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Route path='/' exact component={Home} />\n        <Route path=\"/nasa_photo\" component={NasaPhoto} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}